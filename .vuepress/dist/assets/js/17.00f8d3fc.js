(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{456:function(t,e,n){"use strict";n.r(e);var r=n(19),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("blockquote",[n("p",[t._v("模块化可以隔离作用域，定义自己的命名空间， 解决命名冲突，代码荣誉，依赖关系难以维护，变量污染等问题，提升代码的可读性和可复用性\njs 的模块化发展历程 IIFE >> CommonJS、 AMD、CMD、UMD >> ES6")])]),t._v(" "),n("h2",{attrs:{id:"amd-和-cmd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#amd-和-cmd"}},[t._v("#")]),t._v(" AMD 和 CMD")]),t._v(" "),n("p",[t._v("AMD 和 CMD 都是模块加载规范， require.js 实现了 AMD 规范， 而 sea.js 实现了 CMD 规范")]),t._v(" "),n("p",[n("strong",[t._v("AMD 是 requireJs 在的推广和普及过程中被创造出来。")])]),t._v(" "),n("p",[n("strong",[t._v("CMD 是 SeaJS 在的推广和普及过程中被创造出来。")])]),t._v(" "),n("blockquote",[n("p",[t._v("二者的的主要区别是 CMD 推崇依赖就近，AMD 推崇依赖前置")])]),t._v(" "),n("h3",{attrs:{id:"amd-依赖前置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#amd-依赖前置"}},[t._v("#")]),t._v(" AMD 依赖前置")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("/**\n* @param {string} id 模块名称\n* @param {string[]} dependencies 模块所依赖模块的数组\n* @param {function} factory 模块初始化要执行的函数或对象\n* @return {any} 模块导出的接口\n*/\nfunction define(id?, dependencies?, factory): any\n\n\n/**\n*  定义模块moduleA\n*  引入的依赖lodash\n**/\n// a.js\ndefine('moduleA', ['lodash'], function(lodash) {\n    let fn = function() {}\n    lodash.throttle(fn)\n})\n\n/**\n*\n*  引入的依赖moduleA\n**/\n// b.js\nrequire([moduleA], function (moduleA){\n    console.log(moduleA.a); // 打印出：hello world\n});\n")])])]),n("h3",{attrs:{id:"cmd-依赖就近"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cmd-依赖就近"}},[t._v("#")]),t._v(" CMD 依赖就近")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("function define(factory): any\n\n/**\n*  定义模块a\n**/\n// a.js\ndefine(function (require, exports, module){\n　　exports.a = 'hello world';\n});\n\n/**\n*  在工厂函数中再去引入需要用到的依赖\n**/\n// b.js\ndefine(function (require, exports, module){\n    var moduleA = require('./a.js');\n    console.log(moduleA.a); // 打印出：hello world\n});\n")])])]),n("h2",{attrs:{id:"commonjs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[t._v("#")]),t._v(" CommonJS")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("适用于 node 服务器端")])]),t._v(" "),n("li",[n("p",[t._v("commonJS 是同步加载")])])]),t._v(" "),n("h3",{attrs:{id:"exports"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exports"}},[t._v("#")]),t._v(" exports")]),t._v(" "),n("blockquote",[n("p",[t._v("注意：module.exports 和 exports 的区别是 exports 只是对 module.exports 的一个引用，相当于 Node 为每个模块提供一个 exports 变量，指向 module.exports。这等同在每个模块头部，有一行 var exports = module.exports;这样的命令。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("// a.js\nvar person = {\n    name: 'ddd'\n}\nexports.person = person\n\n// b.js\nvar person = require('./a.js')\nconsole.log(person.name)\n")])])]),n("h3",{attrs:{id:"module-exports"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#module-exports"}},[t._v("#")]),t._v(" module.exports")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("// a.js\nvar person = {\n    name: 'ddd'\n}\nmodule.exports = person\n\n// b.js\nvar person = require('./a.js')\nconsole.log(person.name)\n")])])]),n("h2",{attrs:{id:"umd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#umd"}},[t._v("#")]),t._v(" UMD")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("(function(root, factory){\n    if (typeof define === 'function' && define.amd) {\n        // 判断是否支持 AMD\n        define([], factory)\n    }else if (typeof module === 'object' && module.exports) {\n        // 判断 CommontJS\n        module.exports = factory()\n    } else if (typeof exports === 'object') {\n        // CommonJS\n        exports.myLibName = factory()\n    } else {\n        // 全局变量\n        root.myLibName = factory()\n    }\n\n})(window, function() {\n    return {};\n})\n")])])]),n("p",[t._v("测试")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //AMD\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        //Node, CommonJS之类的\n        module.exports = factory(require('jquery'));\n    } else {\n        //浏览器全局变量(root 即 window)\n        root.returnExports = factory(root.jQuery);\n    }\n}(this, function ($) {\n    //方法\n    function myFunc(){};\n    //暴露公共方法\n    return myFunc;\n}));\n")])])]),n("h2",{attrs:{id:"es6-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es6-node"}},[t._v("#")]),t._v(" ES6 "),n("code",[t._v("node")])]),t._v(" "),n("h3",{attrs:{id:"mjs-与-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mjs-与-js"}},[t._v("#")]),t._v(" .mjs 与 .js")]),t._v(" "),n("p",[t._v(".mjs 表示这个 js 文件是一个模块文件，但是现阶段服务器如果需要正确响应.mjs 后缀的文件，需要配置 "),n("code",[t._v("content-type")]),t._v(" 的 "),n("code",[t._v("MIME")]),t._v("类型")]),t._v(" "),n("h3",{attrs:{id:"export-导出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#export-导出"}},[t._v("#")]),t._v(" export 导出")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("// 导出一个常量\nexport const a = 10\n// 导出一个方法\nexport function a() {\n\n}\n\n// 导出多个数据\nconst a = {}\nconst b = 12\nexport {\n    a, b\n}\n// 默认导出\nexport default defaultVariable\n")])])]),n("h3",{attrs:{id:"import-导入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#import-导入"}},[t._v("#")]),t._v(" import 导入")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("// 导入\nimport {a} from './a.js'\nimport defaultVariable from './default.js'\nimport {a as b} from './a.js'\n")])])]),n("h3",{attrs:{id:"script-引入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#script-引入"}},[t._v("#")]),t._v(" script 引入")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('<script type="module" src="./a.js"> <\/script>\n')])])]),n("h3",{attrs:{id:"动态加载模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态加载模块"}},[t._v("#")]),t._v(" 动态加载模块")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("import('/modules/myModule.mjs')\n.then((module) => {})\n")])])]),n("h2",{attrs:{id:"比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[t._v("#")]),t._v(" 比较")]),t._v(" "),n("table",{staticStyle:{"font-size":"12px"}},[n("tr",[n("td"),t._v(" "),n("td",[t._v("加载方式")]),t._v(" "),n("td",[t._v("加载次数")]),t._v(" "),n("td",[t._v("适用场景")]),t._v(" "),n("td",[t._v("导入方式")]),t._v(" "),n("td",[t._v("导出方式")])]),t._v(" "),n("tr",[n("td",[t._v("AMD")]),t._v(" "),n("td",[t._v("1.运行时加载。异步加载。  \n2.模块加载完成之后就会执行， 但是会等到所有模块都执行完成之后再进入回调函数， 模块的执行顺序和书写顺序不一定一致")]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("浏览器环境，requireJS是参照AMD规范实现的")]),t._v(" "),n("td",[t._v("require(['模块名称'], function ('模块变量引用'){// 代码});")]),t._v(" "),n("td",[t._v("define(function (){return '值');")])]),t._v(" "),n("tr",[n("td",[t._v("CMD")]),t._v(" "),n("td",[t._v("1.运行时加载。异步加载。 2.模块加载完成之后并不会执行， 所有模块都下载完成之后， 遇到require语句才执行相应的模块， 模块的执行顺序和书写顺序一致")]),t._v(" "),n("td"),t._v(" "),n("td"),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("CommonJs")]),t._v(" "),n("td",[t._v("1. 运行时加载。同步加载。 2.模块加载会阻塞接下来代码的执行，需要等到模块加载完成才能继续执行")]),t._v(" "),n("td",[t._v("模块可以被多次加载，但是只会在第一次加载时候运行一次， 后面会从缓存读取")]),t._v(" "),n("td",[t._v("node服务器")]),t._v(" "),n("td",[t._v("require('路径') ")]),t._v(" "),n("td",[t._v("module.exports和exports")])]),t._v(" "),n("tr",[n("td",[t._v("UMD")]),t._v(" "),n("td"),t._v(" "),n("td"),t._v(" "),n("td",[t._v("兼容AMD和commonJS规范的同时，还兼容全局引用的方式。")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("ES6")]),t._v(" "),n("td",[t._v("编译时加载。 按需加载")]),t._v(" "),n("td"),t._v(" "),n("td"),t._v(" "),n("td"),t._v(" "),n("td")])])])}),[],!1,null,null,null);e.default=a.exports}}]);